<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jakub Olczyk</title><link href="https://jakub-olczyk.github.io/" rel="alternate"></link><link href="https://jakub-olczyk.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jakub-olczyk.github.io/</id><updated>2015-06-01T00:00:00+02:00</updated><entry><title>cal i calendar w jednym</title><link href="https://jakub-olczyk.github.io/cal-i-calendar-w-jednym.html" rel="alternate"></link><updated>2015-06-01T00:00:00+02:00</updated><author><name>Jakub Olczyk</name></author><id>tag:jakub-olczyk.github.io,2015-06-01:cal-i-calendar-w-jednym.html</id><summary type="html">&lt;p&gt;Od jakiegoś czasu chciałem sobie jakoś sprytnie połączyć w jedno dostępne w
większości dystrybucji GNU/Linuxa programy &lt;code&gt;cal&lt;/code&gt; oraz &lt;code&gt;calendar&lt;/code&gt;, które w mojej
ocenie są niesamowicie dobrymi rozwiązaniami na podwyższenie produktywności,
szczególnie, gdy dorzuci sie je do swojego &lt;code&gt;.bashrc&lt;/code&gt; tak, żeby przy każdym
włączeniu terminala pełniły rolę przypominajki o ważnych terminach.&lt;/p&gt;
&lt;p&gt;Dla mnie jednak jest w tym mały problem, a mianowicie output z takich poleceń
jest dość pokaźny. Wolałbym to mieć w  bardziej skondensowanej formie,
szczególnie, że obecnie częściej mamy do czynienia z ekranami o większej
szerokości niż wysokości. Dla przykładu output takiego polecenia:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cal&lt;span class="p"&gt;;&lt;/span&gt; calendar
&lt;span class="go"&gt;   Czerwiec 2015      &lt;/span&gt;
&lt;span class="go"&gt;ni po wt śr cz pi so  &lt;/span&gt;
&lt;span class="go"&gt;    1  2  3  4  5  6  &lt;/span&gt;
&lt;span class="go"&gt; 7  8  9 10 11 12 13  &lt;/span&gt;
&lt;span class="go"&gt;14 15 16 17 18 19 20  &lt;/span&gt;
&lt;span class="go"&gt;21 22 23 24 25 26 27  &lt;/span&gt;
&lt;span class="go"&gt;28 29 30&lt;/span&gt;

&lt;span class="go"&gt;Jun 02  Non-Profit status of SPI approved, 1999&lt;/span&gt;
&lt;span class="go"&gt;Jun 02  First issue of Computerworld, 1967&lt;/span&gt;
&lt;span class="go"&gt;Jun 03  Debian&amp;#39;s Diversity Statement ratified, 2012&lt;/span&gt;
&lt;span class="go"&gt;Jun 05  Debian GNU/Linux 1.3 alias ``bo&amp;#39;&amp;#39; released, 1997&lt;/span&gt;
&lt;span class="go"&gt;Jun 06  Debian GNU/Linux 3.1 alias ``sarge&amp;#39;&amp;#39; released, 2005&lt;/span&gt;
&lt;span class="go"&gt;Jun 06  Incorporation of Software in the Public Interest completed, 1997&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jak widać jest to dość długie, a po prawej stronie outputu z &lt;code&gt;cal&lt;/code&gt;a jest
całkiem sporo miejsca. Jak więc połączyć wyniki obu programów w jakiś miły
sposób?  Podejść może być wiele, dla mnie dość oczywistym byłoby skorzystanie w
tym wypadku z Perla, bo to &lt;a href="http://raid6.com.au/~onlyjob/posts/arena/"&gt;język skorojony na potrzeby przetwarzania tekstu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Moje rozwiązanie tego problemu pewnie bardzo odkrywcze nie jest. Pewnie można by
też napisać to krócej. Jeszcze sobie nad tym pomedytuje, ale tak wygląda moje 
rozwiązanie sklepane na kolanie w Perlu.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class="c1"&gt;# author : Jakub Olczyk &amp;lt;jakub.olczyk@openmailbox.org&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# date   : 2015-06-01&lt;/span&gt;
&lt;span class="c1"&gt;# license: GPLv3+&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;say&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@cal_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`cal`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@calendar_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`calendar`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@cal_output&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;@calendar_output&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;@calendar_output&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$cal_output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;@cal_output&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$calendar_output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="vg"&gt;$&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;@output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jak na razie wydaje mi się, że taki skrypcik skutecznie będzie spełniał swoje
zadanie.&lt;/p&gt;
&lt;p&gt;Przykładowy output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;   Czerwiec 2015        Jun 02  Non-Profit status of SPI approved, 1999&lt;/span&gt;
&lt;span class="go"&gt;ni po wt śr cz pi so    Jun 02  First issue of Computerworld, 1967&lt;/span&gt;
&lt;span class="go"&gt;    1  2  3  4  5  6  &lt;/span&gt;
&lt;span class="go"&gt; 7  8  9 10 11 12 13  &lt;/span&gt;
&lt;span class="go"&gt;14 15 16 17 18 19 20  &lt;/span&gt;
&lt;span class="go"&gt;21 22 23 24 25 26 27  &lt;/span&gt;
&lt;span class="go"&gt;28 29 30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="terminal"></category><category term="GNU/Linux"></category></entry><entry><title># service blog restart</title><link href="https://jakub-olczyk.github.io/service-blog-restart.html" rel="alternate"></link><updated>2015-05-12T10:00:00+02:00</updated><author><name>Jakub Olczyk</name></author><id>tag:jakub-olczyk.github.io,2015-05-12:service-blog-restart.html</id><summary type="html">&lt;p&gt;Od jakiegoś czasu myślałem o tym, żeby porzucić wszelkie rozbudowane CMS, które
w dużym stopniu wydawały mi się uciążliwe oraz niesamowicie przeciążone, a już
w żadnej mierze nie pasowały do mojego stylu pracy nad tekstem (trzeba przyznać,
że edycja tekstu w Vimie to jest coś co zmienia człowieka na zawsze). Z tego
też powodu zacząłem szukać jakiegoś rozwiązania mojego problemu z Wordpressem i
innym podobnymi do niego rozwiązaniami.&lt;/p&gt;
&lt;h3&gt;W czym tkwi problem?&lt;/h3&gt;
&lt;p&gt;Poza dość banalnym argumentem jakim jest wygoda pracy moje obawy przed
korzystaniem z rozwiązań typu Wordpress, Joomla itd wiązały się przede
wszystkim z bezpieczeństwem. Jeśli do tego dorzuci się jeszcze własne lenistwo,
to można chyba się zacząć domyślać czemu zainteresowało mnie statyczne
serwowanie stron.&lt;/p&gt;
&lt;p&gt;No więc jaka jest różnica pomiędzy na przykład Wordpressem a generatorem
statycznych stron?&lt;/p&gt;
&lt;p&gt;W przypadku Wordpressa nasz serwer będzie potrzebował jakiejś bazy danych,
interpretera PHP, no i oczywiście serwera HTTP. Jak widać jest to dość dużo
usług jak na jedną maszynę, co może się wiązać z kilkoma wektorami ataku, gdyby
komuś bardzo zależało na dostępie do takiego serwera.&lt;/p&gt;
&lt;p&gt;No ale co się dzieje, gdy ktoś wchodzi na naszą stronę? Skrypt w PHP
dynamicznie połączy treści napisane przez nas z szablonami strony, które
wszystkie siedzą sobie gdzieś w bazie danych lub w jakimś katalogu. No i
dopiero taki output, który się ze sobą pokleił leci do przeglądarki, która
wysłała zapytanie o treść.&lt;/p&gt;
&lt;p&gt;Z kolei to z co ja proponuje to przeprowadzenie tego procesu raz przy dodawaniu
treści do strony. Prawda jest taka, że kiedy coś już się napisze na bloga, to 
raczej nie będziemy tego zmieniać już bardzo często. Dlaczego też nie napisać
naszego artykułu w jakimś lepszym do czytania i edytowania formacie? Ja bardzo
sobie cenię możliwości formatowania jakie daje Markdown i cieszę się gdy mogę
pisać w moim ulubionym edytorze tekstu - Vim. Nie jestem przywiązany do tego, 
co oferuje mi CMS.&lt;/p&gt;
&lt;p&gt;Przy pisaniu bloga za pomocą statycznej generacji jedyne co potrzeba to
oczywiście silnik generatora u siebie na komputerze, gdzie będziemy pisać
artykuł, edytor tekstu i sposób na wrzucenie naszej treści na serwer www. Cały
proces według mnie jest równie prosty co korzystanie z Wordpressa czy Joomli,
a dodatkowo pozwala mi na większą kontrolę tego co się dzieje.&lt;/p&gt;
&lt;h3&gt;Mój wybór - Pelican&lt;/h3&gt;
&lt;p&gt;Nie jest to może najbardziej składny i dokładny opis static site generatorów,
ale myślę, że widać tutaj powody, które mną kierowały. Jeśli kogoś zainteresował
ten temat to polecam sobie wyszukać w DuckDuckGo &lt;code&gt;static site generators&lt;/code&gt; i 
na pewno będą tam wszystkie przydatne informacje.&lt;/p&gt;
&lt;p&gt;Ja sam korzystam z &lt;a href="https://getpelican.com"&gt;Pelicana&lt;/a&gt; jest to dla mnie najlepsze rozwiązanie,
bo przede wszystkim jest napisany w Pythonie, którego chcę się uczyć (i którego
składnia jest mi bliższa niż np. składnia Ruby). Na dokładkę mam już kilka 
aplikacji w systemie, które z niego korzystają więc instalując nie musiałem 
dociągać dużej ilości nowych paczek (kolejny plus).&lt;/p&gt;
&lt;p&gt;Zainteresowanym polecam zajrzeć na :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.staticgen.com/pelican"&gt;Static Gen o Pelicanie &lt;em&gt;można tam poczytać o innych genereatorach&lt;/em&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;GitHub projektu Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.getpelican.com"&gt;Dokumentacja Pelicana&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="static site generation"></category></entry></feed>